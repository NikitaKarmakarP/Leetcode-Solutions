class Solution:
    def countGoodStrings(self, low, high, zero, one):
        MOD = 10**9 + 7
        
        # Initialize dp array
        dp = [0] * (high + 1)
        dp[0] = 1  # Base case: there's one way to create an empty string
        
        # Fill the dp array
        for i in range(1, high + 1):
            if i >= zero:
                dp[i] = (dp[i] + dp[i - zero]) % MOD
            if i >= one:
                dp[i] = (dp[i] + dp[i - one]) % MOD
        
        # Sum the results for lengths in the range [low, high]
        total = sum(dp[low:high + 1]) % MOD
        
        return total

# Example usage
if __name__ == "__main__":
    solution = Solution()
    print(solution.countGoodStrings(3, 3, 1, 1))  # Output: 8
    print(solution.countGoodStrings(2, 3, 1, 2))  # Output: 5
     
